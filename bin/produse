#! /usr/bin/env python

import sys

def usage():
    """
    Prints ProDuSe's usage information to stdout
    """

    from ProDuSe.__version import __version__
    sys.stdout.write("\nProDuSe: Error supression and variant calling pipeline for semi-degenerate barcoded adapter libraries\n")
    sys.stdout.write("Version: " + __version__ + "\n")
    sys.stdout.write("\n")
    sys.stdout.write("Usage:\tproduse <command> [options]\n")
    sys.stdout.write("\n")
    sys.stdout.write("Commands:\n")
    sys.stdout.write(" -- Analysis Pipeline\n")
    sys.stdout.write("    run_produse\t\tRuns all stages of the ProDuSe Pipeline\n")
    sys.stdout.write("    resume_produse\tResumes a previous terminated \"run_produse\"\n")
    sys.stdout.write("\n")
    sys.stdout.write(" -- Pipeline Components\n")
    sys.stdout.write("    trim\t\tTrims off barcodes from raw reads\n")
    sys.stdout.write("    collapse\t\tIdentifies duplicates, and merges duplicates into a consensus\n")
    sys.stdout.write("    call\t\tIdentifies and filters variants\n")
    sys.stdout.write("\n")
    sys.stdout.write(" -- Miscellaneous\n")
    sys.stdout.write("    clip\t\tGenerates a consensus from overlapping positions within a read pair\n")
    sys.stdout.write("    update_config\tUpdates an older ProDuSe configuration file\n")
    sys.stdout.write("    adapter_predict\tIdentifies the degerate barcode used in a set of FASTQ files\n")
    sys.stdout.write("    train\t\tTrains the variant calling filter using a set of validated variants\n")
    sys.stdout.write("\n")
    exit(1)


def main(args):

    # Print out a usage message
    if len(args) == 1:
        usage()
        return

    command = args[1]

    if command == "adapter_predict":
         from ProDuSe import AdapterPredict
         AdapterPredict.main(sysStdin=args[2:])
    elif command == "update_config":
        from ProDuSe import UpdateConfig
        UpdateConfig.main(sysStdin=args[2:])
    elif command == "run_produse":
        from ProDuSe import ProdusePipeline
        ProdusePipeline.main(sysStdin=args[2:])
    elif command == "resume_produse":
        from ProDuSe import ResumePipeline
        ResumePipeline.main(sysStdin=args[2:])
    elif command == "trim":
        from ProDuSe import Trim
        Trim.main(sysStdin=args[2:])
    elif command == "collapse":
        from ProDuSe import Collapse
        Collapse.main(sysStdin=args[2:])
    elif command == "clip" or command == "clipoverlap":
        from ProDuSe import ClipOverlap
        ClipOverlap.main(sysStdin=args[2:])
    elif command == "call":
        from ProDuSe import Call
        Call.main(sysStdin=args[2:])
    elif command == "train":
        from ProDuSe import Train
        Train.main(sysStdin=args[2:])
    elif command == "version" or command == "--version":
        from ProDuSe.__version import __version__
        sys.stdout.write(__version__ + "\n")
    elif command == "--help" or command == "-h":
        usage()
    else:
        sys.stdout.write("Unrecognized Command: %s\n" % command)
        usage()

if __name__ == "__main__":
    main(sys.argv)
