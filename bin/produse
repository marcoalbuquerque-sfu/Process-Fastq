#!/usr/bin/env python

import configargparse
import sys
from ProDuSe import adapter_predict
from ProDuSe import configure_produse
from ProDuSe import collapse
from ProDuSe import trim
from ProDuSe import snv
from ProDuSe import bwa
from ProDuSe import ProdusePipeline
from ProDuSe import filter_produse
from ProDuSe import SplitMerge

parser = configargparse.ArgParser()

subparsers = parser.add_subparsers()

parser_configure_produse = subparsers.add_parser(
    "configure_produse",
    parents=[configure_produse.parser],
    add_help=False,
    usage=""
    )
parser_configure_produse.set_defaults(
    which="configure_produse"
    )

parser_trim = subparsers.add_parser(
    "trim",
    parents=[trim.parser],
    add_help=False
    )
parser_trim.set_defaults(
    which="trim"
    )

parser_align = subparsers.add_parser(
    "align",
    parents=[bwa.parser],
    add_help=False
    )
parser_align.set_defaults(
    which="align"
    )

parser_splitmerge = subparsers.add_parser(
    "split_merge",
    parents=[SplitMerge.parser],
    add_help=False
    )
parser_splitmerge.set_defaults(
    which="split_merge"
    )

parser_collapse = subparsers.add_parser(
    "collapse",
    parents=[collapse.parser],
    add_help=False
    )
parser_collapse.set_defaults(
    which="collapse"
    )

parser_variants = subparsers.add_parser(
    "snv",
    parents=[snv.parser],
    add_help=False
    )
parser_variants.set_defaults(
    which="snv"
    )

parser_filter = subparsers.add_parser(
    "filter",
    parents=[filter_produse.parser],
    add_help=False
    )
parser_filter.set_defaults(
    which="filter"
    )

parser_barcode = subparsers.add_parser(
    "adapter_predict",
    parents=[adapter_predict.parser],
    add_help=False
    )
parser_barcode.set_defaults(
    which="adapter_predict"
    )

parser_run_pipeline = subparsers.add_parser(
    "run_produse",
    parents=[ProdusePipeline.parser],
    add_help=False,
    )
parser_run_pipeline.set_defaults(
    which="run_produse"
    )

parser_version = subparsers.add_parser(
    "version"
    )
parser_version.set_defaults(
    which="version"
    )

if len(sys.argv[1:]) == 0:
    parser.print_help()
    parser.exit()
args = parser.parse_args()

if args.which == "version":
    from ProDuSe.__version import __version__
    sys.stderr.write("ProDuSe " + __version__ + "\n")

if args.which == "adapter_predict":
    adapter_predict.main(args)

if args.which == "collapse":
    collapse.main(args)

if args.which == "snv":
    snv.main(args)

if args.which == "trim":
    trim.main(args)

if args.which == "configure_produse":
    configure_produse.main(args)

if args.which == "align":
    bwa.main(args)

if args.which == "run_produse":
    ProdusePipeline.main(args)

if args.which == "filter":
    filter_produse.main(args)

if args.which == "split_merge":
    SplitMerge.main(args)

